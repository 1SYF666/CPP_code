#pragma once
#include<iostream>
#include<cctype>
#include<array>
#include<string> //getline
#include<fstream> //ifstream
using namespace std;



/*
	6.1
	编写一个程序，读取键盘输入，直到遇到@符号为止，
	并回显输入(数字除外)，同时将大写字符转换为小写，
	将小写字符转换为大写(别忘了cctype函数系列)。
*/
void function_6_1(char* ch);

/*
	6.2
	编写一个程序，最多将10个donation值读入到一个double数组中
	(如果您愿意，也可使用模板类array)。程序遇到非数字输入时将结束输入，
	并报告这些数字的平均值以及数组中有多少个数字大于平均值
*/
void function_6_2(void);

/*
	6.3
	编写一个菜单驱动程序的雏形。该程序显示一个提供4个选项的菜单--每个选项用一个字母标记.
	如果用户使用有效选项之外的字母进行响应，程序将提示用户输入一个有效的字母，直到用户这样做为止。
	然后，该程序使用一条switch语句，根据用户的选择执行一个简单操作。该程序的运行情况如下
*/
void function_6_3(void);

/*
	6.4．
	加入Benevolent Order of Programmer后，在BOP大会上，人们便
	可以通过加入者的真实姓名、头衔或秘密BOP姓名来了解他（她）。请
	编写一个程序，可以使用真实姓名、头衔、秘密姓名或成员偏好来列出
	成员。编写该程序时，请使用下面的结构：
	......
	该程序创建一个由上述结构组成的小型数组，并将其初始化为适当
	的值。另外，该程序使用一个循环，让用户在下面的选项中进行选择：

*/

const int NUM = 5;
const int strsize = 20;
struct bop
{
	char fullname[strsize];
	char title[strsize];
	char bopname[strsize];
	int perference;
};

void function_6_4(void);


/*
	6.5
	例如，收入为38000 tvarps时，所得税为5000 0.00 + 10000 0.10 +
	20000 0.15 + 3000 0.20，即4600 tvarps。请编写一个程序，使用循环来
	要求用户输入收入，并报告所得税。当用户输入负数或非数字时，循环
	将结束。

*/
void function_6_5(void);


/*
	6.6
	编写一个程序，记录捐助给“维护合法权利团体”的资金。该程
	序要求用户输入捐献者数目，然后要求用户输入每一个捐献者的姓名和
	款项。这些信息被储存在一个动态分配的结构数组中。每个结构有两个
	成员：用来储存姓名的字符数组（或string对象）和用来存储款项的
	double成员。读取所有的数据后，程序将显示所有捐款超过10000的捐
	款者的姓名及其捐款数额。该列表前应包含一个标题，指出下面的捐款
	者是重要捐款人（Grand Patrons）。然后，程序将列出其他的捐款者，
	该列表要以Patrons开头。如果某种类别没有捐款者，则程序将打印单
	词“none”。该程序只显示这两种类别，而不进行排序。

*/

const int HIGH_MONEY = 10000;

struct corporation
{
	string name;
	double money;
};

void function_6_6(void);

/*
	6.7
	编写一个程序，它每次读取一个单词，直到用户只输入q。然
	后，该程序指出有多少个单词以元音打头，有多少个单词以辅音打头，
	还有多少个单词不属于这两类。为此，方法之一是，使用isalpha( )来区
	分以字母和其他字符打头的单词，然后对于通过了isalpha( )测试的单
	词，使用if或switch语句来确定哪些以元音打头。该程序的运行情况如
	下：

*/
void function_6_7(void);

/*
	6.8
	编写一个程序，它打开一个文件文件，逐个字符地读取该文
	件，直到到达文件末尾，然后指出该文件中包含多少个字符。
*/
void function_6_8(void);

/*
	6.9
	完成编程练习6，但从文件中读取所需的信息。该文件的第一项
	应为捐款人数，余下的内容应为成对的行。在每一对中，第一行为捐款
	人姓名，第二行为捐款数额。即该文件类似于下面
*/
void function_6_9(void);

/*
	7.1
	编写一个程序，不断要求用户输入两个数，直到其中的一个为
	0。对于每两个数，程序将使用一个函数来计算它们的调和平均数，并
	将结果返回给main( )，而后者将报告结果。调和平均数指的是倒数平均
	值的倒数，计算公式如下：
	调和平均数=2.0 * x * y / (x + y)

*/

void function_7_1(void);

/*
	7.2
	编写一个程序，要求用户输入最多10个高尔夫成绩，并将其存
	储在一个数组中。程序允许用户提早结束输入，并在一行上显示所有成
	绩，然后报告平均成绩。请使用3个数组处理函数来分别进行输入、显
	示和计算平均成绩。
*/

void function_7_2(void);

/*
	7.3
	a．编写一个函数，按值传递box结构，并显示每个成员的值。
	b．编写一个函数，传递box结构的地址，并将volume成员设置为其
	他三维长度的乘积。
	c．编写一个使用这两个函数的简单程序。
*/

struct box
{
	char maker[40];
	float height;
	float width;
	float length;
	float volume;
};

void function_7_3(void);

/*
	7.4
	许多州的彩票发行机构都使用如程序清单7.4所示的简单彩票玩
	法的变体。在这些玩法中，玩家从一组被称为域号码（field number）的
	号码中选择几个。例如，可以从域号码1～47中选择5个号码；还可以从
	第二个区间（如1～27）选择一个号码（称为特选号码）。要赢得头
	奖，必须正确猜中所有的号码。中头奖的几率是选中所有域号码的几率
	与选中特选号码几率的乘积。例如，在这个例子中，中头奖的几率是从
	47个号码中正确选取5个号码的几率与从27个号码中正确选择1个号码的
	几率的乘积。请修改程序清单7.4，以计算中得这种彩票头奖的几率。

*/
void function_7_4(void);

/*
	7.5
	定义一个递归函数，接受一个整数参数，并返回该参数的阶
	乘。前面讲过，3的阶乘写作3!，等于3*2!，依此类推；而0!被定义为
	1。通用的计算公式是，如果n大于零，则n!=n*（n−1）!。在程序中对
	该函数进行测试，程序使用循环让用户输入不同的值，程序将报告这些
	值的阶乘。

*/
void function_7_5(void);


/*
	7.6
	编写一个程序，它使用下列函数：
	Fill_array( )将一个double数组的名称和长度作为参数。它提示用户
	输入double值，并将这些值存储到数组中。当数组被填满或用户输入了
	非数字时，输入将停止，并返回实际输入了多少个数字。
	Show_array( )将一个double数组的名称和长度作为参数，并显示该
	数组的内容。
	Reverse-array( )将一个double数组的名称和长度作为参数，并将存
	储在数组中的值的顺序反转。
	程序将使用这些函数来填充数组，然后显示数组；反转数组，然后
	显示数组；反转数组中除第一个和最后一个元素之外的所有元素，然后
	显示数组。

*/

void function_7_6(void);


/*
	7.7
	修改程序清单7.7中的3个数组处理函数，使之使用两个指针参
	数来表示区间。fill_array( )函数不返回实际读取了多少个数字，而是返
	回一个指针，该指针指向最后被填充的位置；其他的函数可以将该指针
	作为第二个参数，以标识数据结尾。
*/

const int Max = 5;

double* fill_array_7_7(double* begin, double* end);
void show_array_7_7(const double* begin, double* end);
void revalue_7_7(double r, double* begin, double* end);
void function_7_7(void);
